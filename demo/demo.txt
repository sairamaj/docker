
- Lets build web app manually
- will show how to automate 
- to build app we need
	a machine with .net core
- lets to docker hub where public repositories exits
	https://hub.docker.com
	search for "microsoft nanoserver dotnet"
	you will see the image  
		docker pull microsoft/dotnet-nightly:nanoserver
	(this contains what we need)
	see all the iamges
		docker images
	lets run this image	
		- we have 2 options
			- first create and then starting	
			- or directly run (which does both)
		lets run
			docker run <imageid>
				what happend here is it ran and exited immeidately
				( you can see docker ps -a)
		lets run interactively
			docker run -it <imageid>
		lets explore this file system, registry
			do with files
				- create directory
				- create a file (copy con hello.txt)
			cd hklm:
			cd SOFTWARE
			mkdir ContainerTest
			do same thing and see the differences of registry both in 
			container and host.
		lets explore network
			- ipconfig
				it has its own ipconfig
		lets build the application ( this is not usually but wanted to show what we can do with containers.)
			docker run -it -p:5000:5000 e2 cmd.exe	
				md c:\test\web
				dotnet new -t web
				dotnet restore
				dotnet run

				lets test whether web server is runing or not: in another shell
					docker exec -it <id> cmd.exe 
					run powershell
						Invoke-WebRequest -Uri http://localhost:5000
				
				set ASPNETCORE_URLS=http://*:5000
				docker inspect <id> | sls ipadd
				view the page:
					http://ip:5000 
		Lets how we can share 
			docker run -it -p:5000:5000 -v c:\testing:c:\hosttesting e2
			md c:\test\web
			dotnet new -t web
			dotnet restore
			copy \hosttesting
			copy acco*.cs controller
			delete accountcontorller.cs in root
			dotnet restore
			dotnet run
		
			docker inspect <id> | sls ipadd
			http://<ipadd>:5000
				Login
				Fiserv link should be there.
			
		If we exit now everything is lost as the container is readonly
		commit these changes ( this will save the image and may take some time.)
				docker container commit db mydotnetweb:test  ( skip as it may take some time.)
		Lets automate this	
				docker build -f .\web.dockerfile -t testing:test .
		
		Lets build OAuth container in automated way
		Lets run the 2 containers with single command
			docker-compose up
			docker network ls
			docker network inspect <id>
			open chrome and show the login Fiserv

Use cases
	- Bug needs to be reproduced on specific version of COL , test it and fix it	
		ex: COL 4.3.0 runs windows 2008/iis6/sql2008
	
		<blahblah> run <COL430_5678Build>
		<reproudce it/fix/test>
		<send this something to QA>
		QA does regression on this something
		<done>
		<move on to next task>
	- Current development
		- Check-in
		- <blahblah> run <latestbuild>
		- test it/ fixt it/ checkin
	- Deployment to Prouduction
		- on local machine 
			- <blahblah> run <build>
			- test it
			- approve it
			- upload to production server
			- runs just like it in dev (no dependency issues as it was already tested)
Container technology
	- The technology makes above use cases real.
	- The above blahblah is nothing but docker 	
- Build manually a simulator 
- Automate this 

Building application  
   - 3 tier
      web app
	  service using node.js
	  database
  web app  
     nanoserver - 
	 .net core
	          docker pull microsoft/dotnet-nightly:nanoserver
			
		
     



		



docker build -t simulator:test .		# creates simulator:test image ( don't forget the . which is current directory.)
docker images					# shows the images
docker run -it simulator:test			# creates interactive session (runs node.exe as this was starting in image)
docker run -it simulator:test cmd.exe		# runs cmd.exe in interactive session
docker run -d -p:8000:8080 simulator:test	# run in background
docker ps					# shows the running instances
docker ps -a					# shows all the previous ones too.
docker inspect <id>				# shows all the properties
docker logs						# show logs
# get the ip address
curl http://ip:8080				# shows hello world.
docker diff

Challenges
    - Identity correct base image
