
- Lets build web app manually
- will show how to automate 
- to build app we need
	a machine with .net core
- lets to docker hub where public repositories exits
	https://hub.docker.com
	search for "microsoft nanoserver dotnet"
	you will see the image  
		docker pull microsoft/dotnet-nightly:nanoserver
	(this contains what we need)
	see all the iamges
		docker images
	lets run this image	
		- we have 2 options
			- first create and then starting	
			- or directly run (which does both)
		lets run
			docker run <imageid>
				what happend here is it ran and exited immeidately
				( you can see docker ps -a)
		lets run interactively
			docker run -it <imageid>
		lets explore this file system, registry
			do with files
				- create directory
				- create a file (copy con hello.txt)
			cd hklm:
			cd SOFTWARE
			mkdir ContainerTest
			do same thing and see the differences of registry both in 
			container and host.
		lets explore network
			- ipconfig
				it has its own ipconfig
				





Use cases
	- Bug needs to be reproduced on specific version of COL , test it and fix it	
		ex: COL 4.3.0 runs windows 2008/iis6/sql2008
	
		<blahblah> run <COL430_5678Build>
		<reproudce it/fix/test>
		<send this something to QA>
		QA does regression on this something
		<done>
		<move on to next task>
	- Current development
		- Check-in
		- <blahblah> run <latestbuild>
		- test it/ fixt it/ checkin
	- Deployment to Prouduction
		- on local machine 
			- <blahblah> run <build>
			- test it
			- approve it
			- upload to production server
			- runs just like it in dev (no dependency issues as it was already tested)
Container technology
	- The technology makes above use cases real.
	- The above blahblah is nothing but docker 	
- Build manually a simulator 
- Automate this 

Building application  
   - 3 tier
      web app
	  service using node.js
	  database
  web app  
     nanoserver - 
	 .net core
	          docker pull microsoft/dotnet-nightly:nanoserver
			
		
     



		



docker build -t simulator:test .		# creates simulator:test image ( don't forget the . which is current directory.)
docker images					# shows the images
docker run -it simulator:test			# creates interactive session (runs node.exe as this was starting in image)
docker run -it simulator:test cmd.exe		# runs cmd.exe in interactive session
docker run -d -p:8000:8080 simulator:test	# run in background
docker ps					# shows the running instances
docker ps -a					# shows all the previous ones too.
docker inspect <id>				# shows all the properties
docker logs						# show logs
# get the ip address
curl http://ip:8080				# shows hello world.
docker diff

Challenges
    - Identity correct base image
